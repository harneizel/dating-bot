from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile

from database.database import cursor, conn
from state.register_state import Register_anketa
import os


router = Router()


@router.message(CommandStart())
async def start_function(message: Message, bot: Bot):
    user_id: int = message.from_user.id
    nickname = message.from_user.full_name
    user_link = f'<a href="tg://user?id={user_id}">{nickname}</a>'

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        db_user_id = user_data[0]
        keyboard = ReplyKeyboardMarkup(
	        keyboard=[
				[KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')],
		        [KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')]
	        ],
	        resize_keyboard=True
        )
        await bot.send_message(
            chat_id=message.chat.id,
            text=f'''<b>{user_link}</b>, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n
–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∏–º?''',
	        reply_markup=keyboard
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f'''<b>{user_link}</b>, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞\n
–í–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n
–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ /anketa.
            ''',
            reply_to_message_id=message.message_id
        )


@router.message(F.text.lower() == '/cancel')
async def anketa(message: Message, bot: Bot, state: FSMContext):
	await state.clear()
	await bot.send_message(
		chat_id=message.chat.id,
		text='–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!',
		reply_markup=ReplyKeyboardRemove())


@router.message(Command('anketa'))
async def anketa(message: Message, bot: Bot, state: FSMContext):
	user_id: int = message.from_user.id
	nickname = message.from_user.full_name
	# —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥–µ
	user_link = f'<a href="tg://user?id={user_id}">{nickname}</a>'

	await state.set_state(Register_anketa.name)
	await message.answer('–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel')
	await bot.send_message(
		chat_id=message.chat.id,
		text=f'''<b>{user_link}</b>, –Ω–∞—á–Ω–µ–º —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.\n
–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'''
	)


@router.message(Register_anketa.name)
async def name_state(message: Message, bot: Bot, state: FSMContext):
	name = message.text

	if len(name) <= 1 or len(name) > 16:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è'
		)

	elif len(name.split()) > 1:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤'
		)

	elif not name.isalpha():
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã'
		)

	else:
		await state.update_data(name=name)
		await state.set_state(Register_anketa.age)
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n'
			     f'–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –≤ –≤–æ–∑—Ä–∞—Å—Ç–æ–º:'
		)



@router.message(Register_anketa.age)
async def age_state(message: Message, bot: Bot, state: FSMContext):
	age = message.text
	user_id: int = message.from_user.id

	if not age.isdigit():
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
		)
	else:
		age_value = int(age)
		if age_value > 100 or age_value < 5:
			await bot.send_message(
				chat_id=message.chat.id,
				text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
			)
		else:
			await state.update_data(age=age)
			await state.set_state(Register_anketa.gender)
			keyboard = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π')],
					[KeyboardButton(text='–ú—É–∂—Å–∫–æ–π')],
				],
				resize_keyboard=True,
			)

			await bot.send_message(
				chat_id=message.chat.id,
				text='–£—Å–ø–µ—à–Ω–æ!\n–ö–∞–∫–æ–π –≤–∞—à –ø–æ–ª?',
				reply_markup=keyboard
			)


@router.message(Register_anketa.gender)
async def gender_state(message: Message, bot: Bot, state: FSMContext):
	gender = message.text

	if gender in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
		await state.update_data(gender=gender)
		await state.set_state(Register_anketa.photo)
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n'
			     f'–¢–µ–ø–µ—Ä—å c–∫–∏–Ω—å —Å–≤–æ—é —Ñ–æ—Ç–æ—á–∫—É!',
			reply_markup=ReplyKeyboardRemove()
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –¢–∞–∫–æ–≥–æ –≥–µ–Ω–¥–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
		)



@router.message(Register_anketa.photo)
async def photo_state(message: Message, bot: Bot, state: FSMContext):
	if message.photo:
		photo = message.photo[-1]
		file_id = photo.file_id
		file_info = await bot.get_file(file_id)
		file_path = file_info.file_path
		current_dir = os.path.split(os.path.dirname(__file__))[0] # –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
		destination = f'{current_dir}/photos/{file_id}.jpg'
		await bot.download_file(file_path, destination)
		await state.update_data(file_id=file_id)
		await state.update_data(destination=destination)

		await state.set_state(Register_anketa.anketa_description)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! üåü\n'
			     '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã!'
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.'
		)


@router.message(Register_anketa.anketa_description)
async def description_state(message: Message, bot: Bot, state: FSMContext):
	description = message.text

	if len(description) > 200:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!'
		)
	elif len(description) < 10:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!'
		)
	else:
		await state.update_data(description=description)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text="–û–≤–µ–Ω"), KeyboardButton(text='–¢–µ–ª–µ—Ü'), KeyboardButton(text='–ë–ª–∏–∑–Ω–µ—Ü—ã'),
				 KeyboardButton(text='–†–∞–∫')],
				[KeyboardButton(text='–õ–µ–≤'), KeyboardButton(text='–î–µ–≤–∞'), KeyboardButton(text='–í–µ—Å—ã'),
				 KeyboardButton(text='–°–∫–æ—Ä–ø–∏–æ–Ω')],
				[KeyboardButton(text='–°—Ç—Ä–µ–ª–µ—Ü'), KeyboardButton(text='–ö–æ–∑–µ—Ä–æ–≥'), KeyboardButton(text='–í–æ–¥–æ–ª–µ–π'),
				 KeyboardButton(text='–†—ã–±—ã')],
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.zodiak_sign)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–û—Ç–ª–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!\n'
			     '–ö–∞–∫–æ–π —Ç–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞?',
			reply_markup=keyboard
		)


@router.message(Register_anketa.zodiak_sign)
async def zodiak_state(message: Message, bot: Bot, state: FSMContext):
	znak_zodiaka = message.text

	if znak_zodiaka in ["–û–≤–µ–Ω",
	                "–¢–µ–ª–µ—Ü",
	                "–ë–ª–∏–∑–Ω–µ—Ü—ã",
	                "–†–∞–∫",
	                "–õ–µ–≤",
	                "–î–µ–≤–∞",
	                "–í–µ—Å—ã",
	                "–°–∫–æ—Ä–ø–∏–æ–Ω",
	                "–°—Ç—Ä–µ–ª–µ—Ü",
	                "–ö–æ–∑–µ—Ä–æ–≥",
	                "–í–æ–¥–æ–ª–µ–π",
	                "–†—ã–±—ã"]:
		await state.update_data(znak_zodiaka=znak_zodiaka)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç')],
				[KeyboardButton(text='–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')],
			],
			resize_keyboard=True,
		)

		await state.set_state(Register_anketa.grade)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!\n'
			     '–í–æ–ø—Ä–æ—Å: –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –∏–ª–∏ –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –¢–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
		)


@router.message(Register_anketa.grade)
async def grade_state(message: Message, bot: Bot, state: FSMContext):
	grade = message.text

	if grade in ['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']:
		await state.update_data(grade=grade)
		await state.set_state(Register_anketa.faculty)
		keyboard = ReplyKeyboardMarkup(
			keyboard = [
				[KeyboardButton(text='–Æ–§'), KeyboardButton(text='–ì–§'), KeyboardButton(text='–§–ë–¢–î–∏–≠–ë')],
				[KeyboardButton(text='–§–ò–ü–ú'), KeyboardButton(text='–§–°–¢–ò–ì'), KeyboardButton(text='–§–£')],
			],
			resize_keyboard=True,
		)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–û—Ç–ª–∏—á–Ω–æ!\n'
			     '–ù–∞ –∫–∞–∫–æ–º –≤—ã —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
		)


@router.message(Register_anketa.faculty)
async def faculty_state(message: Message, bot: Bot, state: FSMContext):
	faculty = message.text

	if faculty not in ["–Æ–§", "–ì–§", "–§–ë–¢–î–∏–≠–ë", "–§–ò–ü–ú", "–§–°–¢–ò–ì", "–§–£"]:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
		)
	else:
		data = await state.get_data()
		grade = data.get("grade")

		if grade in ['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç']:
			keyboard1 = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text="1"), KeyboardButton(text='2'), KeyboardButton(text='3'), KeyboardButton(text='4'),
					 KeyboardButton(text='5')],
				],
				resize_keyboard=True
			)
			await state.update_data(faculty=faculty)
			await state.set_state(Register_anketa.kurs)
			await bot.send_message(
				chat_id=message.chat.id,
				text='–ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ??',
				reply_markup=keyboard1
			)
		elif grade in ['–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']:
			keyboard2 = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text="1"), KeyboardButton(text='2')],
				],
				resize_keyboard=True
			)
			await state.update_data(faculty=faculty)
			await state.set_state(Register_anketa.kurs)
			await bot.send_message(
				chat_id=message.chat.id,
				text='–ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ??',
				reply_markup=keyboard2
			)


@router.message(Register_anketa.kurs)
async def kurs_state(message: Message, bot: Bot, state: FSMContext):
	kurs = message.text

	if kurs in [1, 2, 3, 4, 5, "1", "2", "3", "4", "5"]:
		await state.update_data(kurs=kurs)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–£—Å–ø–µ—à–Ω–æ!\n'
			     '–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:',
			reply_markup=ReplyKeyboardRemove()
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å!'
		)
		return

	data = await state.get_data()
	name = data.get("name")
	gender = data.get("gender")
	age = data.get("age")
	anketa_description = data.get("description")
	znak_zodiaka = data.get("znak_zodiaka")
	kurs = data.get("kurs")
	faculty = data.get("faculty")
	grade_user = data.get("grade")
	photion = data.get("destination")

	text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
	        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
	        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
	        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
	        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
	        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
	        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
	        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

	await bot.send_photo(
		chat_id=message.chat.id,
		caption=text,
		photo=FSInputFile(photion)
	)
	keyboard = ReplyKeyboardMarkup(
		keyboard=[
			[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
			[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
		],
		resize_keyboard=True
	)
	await state.set_state(Register_anketa.final)
	await bot.send_message(
		chat_id=message.chat.id,
		text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
		reply_markup=keyboard
	)


@router.message(Register_anketa.final)
async def finally_state(message: Message, bot: Bot, state: FSMContext):
	user_id: int = message.from_user.id
	username = message.from_user.username
	nickname = message.from_user.full_name
	final = message.text

	if final not in ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"]:
		await bot.send_message(
			chat_id=message.chat.id,
			text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç'
		)
	else:
		if final in ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
			data = await state.get_data()
			name = data.get("name")
			gender = data.get("gender")
			age = data.get("age")
			anketa_description = data.get("description")
			znak_zodiaka = data.get("znak_zodiaka")
			kurs = data.get("kurs")
			faculty = data.get("faculty")
			grade_user = data.get("grade")
			photion = data.get("file_id")

			if gender == "–ú—É–∂—Å–∫–æ–π":
				gender = 'male'
			if gender == "–ñ–µ–Ω—Å–∫–∏–π":
				gender = 'female'
			if faculty == '–Æ–§':
				faculty = 'LF'
			if faculty == '–ì–§':
				faculty = 'GF'
			if faculty == '–§–ë–¢–î–∏–≠–ë':
				faculty = 'BTB'
			if faculty == '–§–ò–ü–ú':
				faculty = 'FIPM'
			if faculty == '–§–°–¢–ò–ì':
				faculty = 'FSTIG'
			if faculty == '–§–£':
				faculty = 'FU'
			cursor.execute('''
			        INSERT INTO users (
			            user_id,
			            username,
			            nickname,
			            name,
			            gender,
			            age,
			            photo,
			            anketa_description,
			            zodiac_sign,
			            kurs,
			            faculty,
			            grade
			        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
			    ''', (user_id, username, nickname, name, gender, age, photion, anketa_description, znak_zodiaka, kurs, faculty, grade_user))
			cursor.execute('''
				  INSERT INTO like (
				  	user_id,
					hidden
				  ) VALUES (?, ?)
				  ''', (user_id, user_id))
			await state.clear()
			conn.commit()

			keyboard1 = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')],
					[KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')]
				],
				resize_keyboard=True
			)

			await bot.send_message(
				chat_id=message.chat.id,
				text='–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n'
				     '–í—ã–±–µ—Ä–µ—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:',
				reply_markup=keyboard1
			)
		elif final in ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"]:
			await state.set_state(Register_anketa.redaction)
			keyboard = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text='–ò–º—è'), KeyboardButton(text='–í–æ–∑—Ä–∞—Å—Ç'), KeyboardButton(text='–ü–æ–ª')],
					[KeyboardButton(text='–§–æ—Ç–æ'), KeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ'), KeyboardButton(text='–ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞')],
					[KeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä/–ë–∞–∫–∞–ª–∞–≤—Ä"), KeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç'),
					 KeyboardButton(text='–ö—É—Ä—Å')]
				],
				resize_keyboard=True
			)
			await bot.send_message(
				chat_id=message.chat.id,
				text="–° –∫–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞—á–Ω—ë–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?",
				reply_markup=keyboard
			)


@router.message(Register_anketa.redaction)
async def redaction(message: Message, bot: Bot, state: FSMContext):
	red = message.text

	if red == "–ò–º—è":
		await state.set_state(Register_anketa.name_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
		)
	elif red == "–í–æ–∑—Ä–∞—Å—Ç":
		await state.set_state(Register_anketa.age_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
		)
	elif red == "–ü–æ–ª":
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π')],
				[KeyboardButton(text='–ú—É–∂—Å–∫–æ–π')],
			],
			resize_keyboard=True,
		)
		await state.set_state(Register_anketa.gender_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?",
			reply_markup=keyboard
		)
	elif red == "–§–æ—Ç–æ":
		await state.set_state(Register_anketa.photo_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–°–∫–∏–Ω—å –∫–∞ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ—á–∫—É!"
		)
	elif red == "–û–ø–∏—Å–∞–Ω–∏–µ":
		await state.set_state(Register_anketa.anketa_description_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!"
		)
	elif red == "–ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞":
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text="–û–≤–µ–Ω"), KeyboardButton(text='–¢–µ–ª–µ—Ü'), KeyboardButton(text='–ë–ª–∏–∑–Ω–µ—Ü—ã'),
				 KeyboardButton(text='–†–∞–∫')],
				[KeyboardButton(text='–õ–µ–≤'), KeyboardButton(text='–î–µ–≤–∞'), KeyboardButton(text='–í–µ—Å—ã'),
				 KeyboardButton(text='–°–∫–æ—Ä–ø–∏–æ–Ω')],
				[KeyboardButton(text='–°—Ç—Ä–µ–ª–µ—Ü'), KeyboardButton(text='–ö–æ–∑–µ—Ä–æ–≥'), KeyboardButton(text='–í–æ–¥–æ–ª–µ–π'),
				 KeyboardButton(text='–†—ã–±—ã')],
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.zodiak_sign_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ö–∞–∫–æ–≤ —Ç–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞?",
			reply_markup=keyboard
		)
	elif red == "–ú–∞–≥–∏—Å—Ç—Ä/–ë–∞–∫–∞–ª–∞–≤—Ä":
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç')],
				[KeyboardButton(text='–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')],
			],
			resize_keyboard=True,
		)
		await state.set_state(Register_anketa.grade_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç??",
			reply_markup=keyboard
		)
	elif red == '–§–∞–∫—É–ª—å—Ç–µ—Ç':
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–Æ–§'), KeyboardButton(text='–ì–§'), KeyboardButton(text='–§–ë–¢–î–∏–≠–ë')],
				[KeyboardButton(text='–§–ò–ü–ú'), KeyboardButton(text='–§–°–¢–ò–ì'), KeyboardButton(text='–§–£')],
			],
			resize_keyboard=True,
		)
		await state.set_state(Register_anketa.faculty_red)
		await bot.send_message(
			chat_id=message.chat.id,
			text="–ö–∞–∫–æ–π —Ç–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?",
			reply_markup=keyboard
		)
	elif red == "–ö—É—Ä—Å":
		data = await state.get_data()
		grade = data.get("grade")

		if grade in ['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç']:
			await state.set_state(Register_anketa.kurs_red)
			keyboard1 = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text="1"), KeyboardButton(text='2'), KeyboardButton(text='3'),
					 KeyboardButton(text='4'),
					 KeyboardButton(text='5')],
				],
				resize_keyboard=True
			)
			await bot.send_message(
				chat_id=message.chat.id,
				text='–ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ??',
				reply_markup=keyboard1
			)
		elif grade in ['–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']:
			keyboard2 = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text="1"), KeyboardButton(text='2')],
				],
				resize_keyboard=True
			)
			await state.set_state(Register_anketa.kurs_red)
			await bot.send_message(
				chat_id=message.chat.id,
				text="–ö–∞–∫–æ–≤ —Ç–≤–æ–π –∫—É—Ä—Å?",
				reply_markup=keyboard2
			)


@router.message(Register_anketa.name_red)
async def name_state(message: Message, bot: Bot, state: FSMContext):
	name = message.text

	if len(name) <= 1 or len(name) > 16:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è'
		)

	elif len(name.split()) > 1:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤'
		)

	elif not name.isalpha():
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã'
		)

	else:
		await state.update_data(name=name)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)


@router.message(Register_anketa.age_red)
async def age_state(message: Message, bot: Bot, state: FSMContext):
	age = message.text
	user_id: int = message.from_user.id

	if not age.isdigit():
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
		)
	else:
		age_value = int(age)
		if age_value > 100 or age_value < 5:
			await bot.send_message(
				chat_id=message.chat.id,
				text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
			)

		else:
			await state.update_data(age=age)
			data = await state.get_data()
			name = data.get("name")
			gender = data.get("gender")
			age = data.get("age")
			anketa_description = data.get("description")
			znak_zodiaka = data.get("znak_zodiaka")
			kurs = data.get("kurs")
			faculty = data.get("faculty")
			grade_user = data.get("grade")
			photion = data.get("destination")

			text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
			        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
			        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
			        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
			        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
			        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
			        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
			        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

			await bot.send_photo(
				chat_id=message.chat.id,
				caption=text,
				photo=FSInputFile(photion)
			)
			keyboard = ReplyKeyboardMarkup(
				keyboard=[
					[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
					[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
				],
				resize_keyboard=True
			)
			await state.set_state(Register_anketa.final)
			await bot.send_message(
				chat_id=message.chat.id,
				text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
				reply_markup=keyboard
			)


@router.message(Register_anketa.gender_red)
async def gender_state(message: Message, bot: Bot, state: FSMContext):
	gender = message.text

	if gender in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
		await state.update_data(gender=gender)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –¢–∞–∫–æ–≥–æ –≥–µ–Ω–¥–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
		)


@router.message(Register_anketa.photo_red)
async def photo_state(message: Message, bot: Bot, state: FSMContext):
	if message.photo:
		photo = message.photo[-1]
		file_id = photo.file_id
		file_info = await bot.get_file(file_id)
		file_path = file_info.file_path
		current_dir = os.path.split(os.path.dirname(__file__))[0] # –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
		destination = f'{current_dir}/photos/{file_id}.jpg'
		await bot.download_file(file_path, destination)
		await state.update_data(file_id=file_id)
		await state.update_data(destination=destination)

		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.'
		)


@router.message(Register_anketa.anketa_description_red)
async def description_state(message: Message, bot: Bot, state: FSMContext):
	description = message.text

	if len(description) > 200:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!'
		)
	elif len(description) < 10:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!'
		)
	else:
		await state.update_data(description=description)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)


@router.message(Register_anketa.zodiak_sign_red)
async def zodiak_state(message: Message, bot: Bot, state: FSMContext):
	znak_zodiaka = message.text

	if znak_zodiaka in ["–û–≤–µ–Ω",
	                "–¢–µ–ª–µ—Ü",
	                "–ë–ª–∏–∑–Ω–µ—Ü—ã",
	                "–†–∞–∫",
	                "–õ–µ–≤",
	                "–î–µ–≤–∞",
	                "–í–µ—Å—ã",
	                "–°–∫–æ—Ä–ø–∏–æ–Ω",
	                "–°—Ç—Ä–µ–ª–µ—Ü",
	                "–ö–æ–∑–µ—Ä–æ–≥",
	                "–í–æ–¥–æ–ª–µ–π",
	                "–†—ã–±—ã"]:
		await state.update_data(znak_zodiaka=znak_zodiaka)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –¢–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'
		)


@router.message(Register_anketa.grade_red)
async def grade_state(message: Message, bot: Bot, state: FSMContext):
	grade = message.text

	if grade in ['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']:
		await state.update_data(grade=grade)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
		)


@router.message(Register_anketa.faculty_red)
async def faculty_state(message: Message, bot: Bot, state: FSMContext):
	faculty = message.text

	if faculty not in ["–Æ–§", "–ì–§", "–§–ë–¢–î–∏–≠–ë", "–§–ò–ü–ú", "–§–°–¢–ò–ì", "–§–£"]:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
		)
	else:
		await state.update_data(faculty=faculty)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)


@router.message(Register_anketa.kurs_red)
async def kurs_state(message: Message, bot: Bot, state: FSMContext):
	kurs = message.text

	if kurs in [1, 2, 3, 4, 5, "1", "2", "3", "4", "5"]:
		await state.update_data(kurs=kurs)
		data = await state.get_data()
		name = data.get("name")
		gender = data.get("gender")
		age = data.get("age")
		anketa_description = data.get("description")
		znak_zodiaka = data.get("znak_zodiaka")
		kurs = data.get("kurs")
		faculty = data.get("faculty")
		grade_user = data.get("grade")
		photion = data.get("destination")

		text = (f'ü™Ñ –ò–º—è: <b>{name}</b>\n'
		        f'–í–∞—à –ø–æ–ª: <b>{gender}</b>\n'
		        f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
		        f'–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: <b>{anketa_description}</b>\n'
		        f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <b>{znak_zodiaka}</b>\n'
		        f'–ö—É—Ä—Å: <b>{kurs}</b>\n'
		        f'–§–∞–∫—É–ª—å—Ç–µ—Ç: <b>{faculty}</b>\n'
		        f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: <b>{grade_user}</b>')

		await bot.send_photo(
			chat_id=message.chat.id,
			caption=text,
			photo=FSInputFile(photion)
		)
		keyboard = ReplyKeyboardMarkup(
			keyboard=[
				[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
				[KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')]
			],
			resize_keyboard=True
		)
		await state.set_state(Register_anketa.final)
		await bot.send_message(
			chat_id=message.chat.id,
			text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?',
			reply_markup=keyboard
		)
	else:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å!'
		)
