from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database.database import cursor


def admin_panel_for_admins():
    buttons = [
	    [
		    types.InlineKeyboardButton(text='üõ† –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç', callback_data='anket_admin_view')
	    ],
	    [
		    types.InlineKeyboardButton(text='ü©∏ –¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫', callback_data='view_touch_to')
	    ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def create_keyboard(page=1, page_size=4):
    offset = (page - 1) * page_size
    cursor.execute('''SELECT user_id, nickname, faculty FROM users LIMIT ? OFFSET ?''', (page_size, offset))
    data = cursor.fetchall()

    inline = []
    user_dict = {}
    row = []
    for user_id, nickname, faculty in data:
        button = InlineKeyboardButton(text=str(nickname), callback_data=f"user_call_{int(user_id)}")
        row.append(button)
        if len(row) == 2:
            inline.append(row)
            row = []
        if nickname is None:
            nickname = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        if faculty is None:
            faculty = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

        if faculty == 'LF':
            faculty = '–Æ–§'
        if faculty == 'GF':
            faculty = '–ì–§'
        if faculty == 'BTB':
            faculty = '–§–ë–¢–î–∏–≠–ë'
        if faculty == 'FIPM':
            faculty = '–§–ò–ü–ú'
        if faculty == 'FSTIG':
            faculty = '–§–°–¢–ò–ì'
        if faculty == 'FU':
            faculty = '–§–£'

        user_dict[str(user_id)] = {'nickname': nickname, 'faculty': faculty}

    if page > 1:
        prev_button = InlineKeyboardButton(text="<< –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"prev_{page-1}")
        inline.append([prev_button])
    if len(data) == page_size:
        next_button = InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ >>>", callback_data=f"next_{page+1}")
        inline.append([next_button])

    ikb = InlineKeyboardMarkup(inline_keyboard=inline)
    return ikb, user_dict


def user_checkout():
    buttons = [
	    [
		    types.InlineKeyboardButton(text='üåÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='redaction_with_inline')
	    ],
	    [
		    types.InlineKeyboardButton(text='üî∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data='blocked_inline')
	    ],
	    [
		    types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='anket_admin_view')
	    ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def redaction_inline():
    buttons = [
        [
	        types.InlineKeyboardButton(text='–ò–º—è', callback_data='red_name'),
	        types.InlineKeyboardButton(text='–ü–æ–ª', callback_data='red_gender'),
	        types.InlineKeyboardButton(text='–í–æ–∑—Ä–∞—Å—Ç', callback_data='red_age'),
	        types.InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data='red_photo'),
	        types.InlineKeyboardButton(text='–ó–ó', callback_data='red_sign_zodiac'),
        ],
	    [
		    types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='red_descr'),
		    types.InlineKeyboardButton(text='–ö—É—Ä—Å', callback_data='red_kurs'),
		    types.InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç', callback_data='red_facultet'),
		    types.InlineKeyboardButton(text='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', callback_data='red_naznachenie'),
	    ],
	    [
		    types.InlineKeyboardButton(text='üî∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data='blocked_inline')
	    ],
	    [
		    types.InlineKeyboardButton(text='‚Ü©Ô∏è –í –º–µ–Ω—é –ø–æ–∏—Å–∫–∞', callback_data='anket_admin_view')
	    ],
	]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def user_checkout_push():
    buttons = [
	    [
		    types.InlineKeyboardButton(text='üåÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='redaction_with_inline_view')
	    ],
	    [
		    types.InlineKeyboardButton(text='üî∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data='blocked_inline_view')
	    ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def redaction_inline_view():
    buttons = [
        [
	        types.InlineKeyboardButton(text='–ò–º—è', callback_data='red_name_view'),
	        types.InlineKeyboardButton(text='–ü–æ–ª', callback_data='red_gender_view'),
	        types.InlineKeyboardButton(text='–í–æ–∑—Ä–∞—Å—Ç', callback_data='red_age_view'),
	        types.InlineKeyboardButton(text='–§–æ—Ç–æ', callback_data='red_photo_view'),
	        types.InlineKeyboardButton(text='–ó–ó', callback_data='red_sign_zodiac_view'),
        ],
	    [
		    types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='red_descr_view'),
		    types.InlineKeyboardButton(text='–ö—É—Ä—Å', callback_data='red_kurs_view'),
		    types.InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç', callback_data='red_facultet_view'),
		    types.InlineKeyboardButton(text='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', callback_data='red_naznachenie_view'),
	    ],
	    [
		    types.InlineKeyboardButton(text='üî∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data='blocked_inline_view')
	    ],
	]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
